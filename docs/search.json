[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Capstone in Political Economy",
    "section": "",
    "text": "Introduction\nThis web book is meant to be a one-stop resource for all data and analysis related tasks in the Capstone in Political Economy course.\nThe pages will correspond to Data and Analysis sections in the course.\nThe notes here will use R as a programming language and RStudio as platform (or technically known as IDE - Integrated Development Platform) of choice. However, all the concepts will also be valid for Stata users. I will include any important/relevant deviations between the two programming statistical software approaches here.\nYou shoudl start by having the following installed on your computers:\n\nR - Statistical Programming Language\nRStudio - Interactive Development Environment for R\nStata - Statistical Software Package (the “other” one)\nZotero - Reference Management Tool\nGitHub - Storing code online with version control\n\n\nR and R Studio\nUse the link here to install RStudio on your systems.\n\n\nStata\nStata is a paid software. Georgetown provides download option through the university webstore here.\n\n\nZotero\nZotero is a reference management tool. It allows you to maintain a structured bibliography. Its integration with various web browsers and software like MS Word and R, makes it a fantastic tool for keeping track of readings as well as citing them.\n\n\n\n\n\nZotero Folder\n\n\n\n\n\nMake Zotero Account.\nAdd a connector to the browser (For eg, zotero connector for google chrome).\nDownload Zotero Desktop App here.\nConnect Zotero to R Studio. (We will do this step on Day 5, using the link here).\n\n\n\nGitHub\nMake your account here",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Course Details",
    "section": "",
    "text": "Capstone in Political Economy\nIPEC/PECO—4980, Spring 2025\nTuesday/Thursday: 11:00–12:15\nWalsh 495",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#professors",
    "href": "intro.html#professors",
    "title": "Course Details",
    "section": "Professors",
    "text": "Professors\nProf. Nita Rudra\n- Office: Mortara Center 206\n- Office Hours: Tuesdays, 12:30–1:30 pm\n- Email: nr404@georgetown.edu\nProf. Joel Simmons\n- Office: Mortara Center #212\n- Office Hours: TBA\n- Email: js4618@georgetown.edu\nTA: Parushya\n- Office Hours: Thursdays, 1:00–3:00 PM\n- Location: TBA/Zoom - Email: pp714@georgetown.edu",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#office-hour-links",
    "href": "intro.html#office-hour-links",
    "title": "Course Details",
    "section": "Office Hour Links",
    "text": "Office Hour Links\n\nSign up for Professor Rudra’s office hours (Zoom or in-person)\n\nSign up for Professor Simmons’ office hours",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#goals",
    "href": "intro.html#goals",
    "title": "Course Details",
    "section": "Goals",
    "text": "Goals\nStudents will write a senior research thesis in political economy. You will find and evaluate scholarly literature and make an original contribution to that literature. The focus will be on developing a research question and a methodology to address it. The course serves as the culmination of the knowledge you obtained as majors in International Political Economy (SFS students) or Political Economy (College students).",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#requirements",
    "href": "intro.html#requirements",
    "title": "Course Details",
    "section": "Requirements",
    "text": "Requirements\nThe only course requirement is that students attend and participate in all lecture, discussion, presentation, and writing sessions.\nStudents may find the following book helpful as they proceed, and so it is recommended but not required:\n\nPowner, L. (2015). Empirical research and writing. A Political Science Student’s Practical Guide. SAGE Publications, Inc.\nhttps://doi.org/10.4135/9781483395906",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#assignments",
    "href": "intro.html#assignments",
    "title": "Course Details",
    "section": "Assignments",
    "text": "Assignments\n\nResearch Paper (90%)\nEach student will write an article-length paper based on the student’s own original research. The length should be of a standard article in the political economy field—about 20 pages, double-spaced, 12-point font, including tables, figures, references, and notes. In the paper, students are expected to evaluate, critique, test, and build upon a current debate in political economy. Students should develop hypotheses and test them using quantitative methods. All final thesis papers must be posted on the Canvas discussion site and submitted in hard copy (if possible) by the due date listed in the outline. Late papers will be downgraded ½ a letter grade per day late.\n\n\nResearch Presentations (10%)\nToward the end of the term, each student will present their paper to the class. Student presentations should be no more than 8–10 minutes in length and will be followed by 8–10 minutes of questions and answers. Use of PowerPoint slides or other presentation materials is required. An electronic version of your presentation must be posted on the Canvas discussion site by 10:00 am on the day it is to be presented.",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#class-structure",
    "href": "intro.html#class-structure",
    "title": "Course Details",
    "section": "Class Structure",
    "text": "Class Structure\nThe course has three forms of instruction:\n\nLecture/Discussions: Sessions indicated as ‘Discussions’ will be a cross between a lecture and group Q&A. These sessions will focus on the major components of the final thesis: Topic/Puzzle, literature review, methodology, and analysis.\n\nData Sessions: The TA will provide sessions aimed at providing you a brief refresher on working with statistical software such as R or Stata.\n\nWriting Days: Much of the semester will be dedicated toward group meetings and writing days. Students will come to class and work on their papers. The professors and TA will be available for questions.\n\nStudents will be divided into two cohorts: one led by Professor Nita Rudra and the other by Professor Joel Simmons. Each cohort will further be subdivided into Group A and Group B. Please ensure you are aware of your assigned cohort and group, as this will determine your participation and schedule throughout the course.\n\n\n\nTentative Schedule\n\n\nOn days scheduled as “Writing Day with Professors”, the particular groups (A or B) from Prof Rudra & Simmons sections will meet them separately. The other groups from both sections will meet the TA (Writing Day with TA).\nAs the course progresses, writing days could also be used as days for one-on-one meetings with Professors and TA for focused discussion on your research projects.\nThe due dates for deliverables (column 3 above) are for both groups in both the sections. All the deliverables are due on Canvas before the beginning of class on that particular date.\nDetails of these deliverables is as follows:\nShort research proposal: Your research proposal should include (i) the research question and why it is interesting, (ii) your working hypothesis and its basis, (iii) potential methodological approach, data and challenges.  It is due on Canvas by the beginning of class. \nLiterature Review: Your literature review should summarize key scholarly works relevant to your research question, identify gaps or unresolved questions in the existing literature, and explain how your research will address these gaps.\nAnalysis: Submit a write-up of the analysis section (including the description of the research methods, presentation of results, and discussion of their robustness).\nPresentation: Standard conference poster presentation. More details about this deliverable to be explained in class.\nAnnotated replication material: Your annotated replication material should include all data, program files, and a detailed readme file necessary to replicate your results. The readme file should clearly explain the steps to reproduce your analysis and any specific instructions for using the data or code.\nFinal Paper: Your final paper should be an article-length manuscript (approximately 20 double-spaced pages) that evaluates, critiques, tests, and builds upon a current debate in political economy. It should include a clear research question, hypotheses, methodology, analysis, results, and a discussion of findings.",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "rep-research.html",
    "href": "rep-research.html",
    "title": "Reproducible Research",
    "section": "",
    "text": "Why Programming or Coding?\nThere are a lot of fancy answers to it. But the key idea is that you want to be lazy about repetitive tasks (MBAs call it being “productive”).\nMany tasks - data cleaning, wrangling, visualization, and statistical analysis - require you to do them many times. Moreover, you would want to be able to reproduce and replicate your thinking about all of the tasks mentioned above on many different datasets and sometimes even on the same dataset after some time.\nCoding is about formalizing your thinking about how you treat the data and automating the formalization task to be done repetitively. It improves efficiency, enhances reproducibility, and boosts creativity when it comes to finding new patterns in your data.\nGuidelines for data and statistical analyses:1",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#why-programming-or-coding",
    "href": "rep-research.html#why-programming-or-coding",
    "title": "Reproducible Research",
    "section": "",
    "text": "Accuracy: Write a code that reduces the chances of making an error and lets you catch one if it occurs.\nEfficiency: If you are doing it twice, see the pattern of your decision-making and formalize it in your code. Difference between Excel and coding\nReplicate-and-Reproduce: Ability to repeat the computational process which reflects your thinking and decisions that you took along the way. Improves transparency and forces one to be deliberate and responsible about choices during analyses.\n\nHuman Interpretability: Writing code is not just about analyzing but allowing yourself and then others to be able to understand your analytic choices.\n\nPublic Good: Research is a public good. And the code allows your research to be truly accessible. This means you write a code that anyone else who understands the language can read, reuse, and recreate without you being present. We essentially ensure that by writing a readable and ideally publicly accessible code.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#r-and-rstudio",
    "href": "rep-research.html#r-and-rstudio",
    "title": "Reproducible Research",
    "section": "R and RStudio",
    "text": "R and RStudio\nR is a free open-source statistical programming language. We generally use R through RStudio which is an integrated development environment (IDE). Essentially, it is the graphic user interface that allows us to use R efficiently. It has point-and-click functionality also (which we would not use a lot).\n\n\n\n\n\nRStudio Screen\n\n\n\n\nR Scripts: This is where put your code in a script. The script is saved with a .R extension. An R script is a text file that you can read on text editors too. We use RStudio to run the code in a way that the computer understands.\nConsole: Output from your code appears here. You can also write the code directly here. But it does not get saved. Also, by default, it shows only a limited number of previous steps (commands + outputs). Not a good practice to code here.\nEnvironment: All the objects, datasets, lists, etc that you have created/loaded in the environment appear here. Alongside, you also see the custom functions that you might create.\nFile Browser/Help/Plot: Internal file navigator and help documentation for packages and functions appear here. Further, when you plot anything, that also gets shown here.\nComments: R interprets every line in the script as a separate command. And it does for each line unless preceded by a #. Comments signal to R that what follows the # is to be ignored.We use comments to write explanatory notes about the code. A comment should explain the purpose of a command or code and not just be a description of what it does.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#basics",
    "href": "rep-research.html#basics",
    "title": "Reproducible Research",
    "section": "Basics",
    "text": "Basics\nR uses &lt;- as the assignment operator. To the left of it is an object (sort of like a box that stores values which are to the right of the operator).\nSyntax: object &lt;- value/data\n\nExercise 1Code 1\n\n\n\nCreate a new .R script. Name it and save it on your system.\n\nR does all the functions of a calculator. Write some code in the script that\n\n\nAdds two numbers\nMultiplies three numbers\nPrints your name\n\n\nRun each command separately by using cmd + Enter / ctrl + Enter.\nAssign the outputs from 2 to different objects.\nPrint the objects with some description using paste().\nRun the whole file.\n\n\n\nYou can start a new script through many different ways:\n\nctrl + shift + n\nClick on the tiny white page button with a green+sign on the upper left corner of the screen\nClick on File &gt; New file&gt; R script\n\nSaving a script:\n\nCtrl + S\nEnter the name of the script, and add .R as a suffix. For example: xyzbasic.R\n\n\n#2. \n2 + 7\n\n56 * 9 * 33\n\nprint(\"Parushya\")\n\nThe output is displayed in the console.\n\n#4\n\n\nsum_2 &lt;- 2 + 7\n\nprod_3 &lt;- 56 * 9 * 33\n\nname &lt;- \"parushya\"\n\n\n#5\n\npaste(\"Sum of 2 and 7 is\", sum_2)\n\npaste(\"Product of 56, 9 and 33 is\", prod_3)\n\npaste(\"This very fancy R code was written by\", name)",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#objects-datatypes-and-data-structures",
    "href": "rep-research.html#objects-datatypes-and-data-structures",
    "title": "Reproducible Research",
    "section": "Objects, Datatypes, and Data Structures",
    "text": "Objects, Datatypes, and Data Structures\n\n\n\n\n\n\nExercise 2\n\n\n\nRun the following code in the same script that we created\n\nclass(sum_2)\n\nclass(prod_3)\n\nclass(name)\n\n\n\nEverything in R is called an “object”\n“Objects” contain “data”.\nThe three variables we created - sum_2, prod_3, and name - were all basic objects.\nR has 5 basic or “atomic” classes/datatypes of objects.\n\nCharacter - (abc)\nNumeric - (real numbers) - (1,7.5,etc)\nInteger - (1,2,0,-896)\nLogical - (True/False)\nComplex - (1, 0+i)\n\nData structures are bigger containers that hold many objects.\nTwo basic or “atomic” data structures in R are:\n\nVectors: can hold objects of same datatype\nLists: can hold objects with different datatypes\n\n\n\n\n\n\n\nUnderstanding Vectors\n\n\n\nWe can create a vector using the “c()” command.\n\na_num &lt;- c(0,0.7,9,2,3,4,-1)            # numeric or double\n\nb_logical &lt;- c(TRUE,FALSE,TRUE,TRUE,TRUE) # logical\n\nc_logical &lt;- c(T,F,T,T,T) # also logical - Never use T and F as it leads to errors in analysis\n\nd_char &lt;- c(\"Sheila\", \"Nila\", \"Camilla\")  # character\n\ne_int &lt;- 1:20 # integer\n\nf_int &lt;- c(1,2,3,4,5)  # integer\n\ng_int &lt;- c(1+0i,2+4i) # complex numbers\n\nBasic vectors are uni-dimensional. We can make a two dimensional vector, which is called matrix.\n\nWorking with matrices\n\n# Creating Blank Matrix\nm_1 &lt;- matrix(nrow=3,ncol=4)\nm_1      \n\n     [,1] [,2] [,3] [,4]\n[1,]   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA\n\ndim(m_1)\n\n[1] 3 4\n\n\n\n?matrix # Help documentation\n\n# Creating Matrix with elements\n\nm_2 &lt;- matrix(1:10, nrow = 3, ncol = 4) # Why the warning?\nm_2\n\n# With correct number of elements\nm_3 &lt;- matrix(1:18, nrow=9, ncol=2))\nm3\n\nLogic of matrices\nMatrices are constructed column-wise. So, it fills the upper left corner, and then runs down along.\nIndexing in matrices\n\n# Rows & Columns ----    \n# Very simply the syntax is:  (2,3) = (Rows, Columns)\n# m[1,] - 1st row\n# m[2,] - 2nd row\n# m[,3] - 3rd column  \n# m[,5] - 5th column\n# m[,7] - 7th column\n\n\n# What if you already have a vector?\n# Example: You have received a list of students who have skipped school today.\n# You know which section they are in, and want to create a matrix.\nk &lt;- c(\"Hashem\", \"John\", \"Cecillia\", \"Minha\", \"Parushya\", \"Keeheon\")\nk\n\n[1] \"Hashem\"   \"John\"     \"Cecillia\" \"Minha\"    \"Parushya\" \"Keeheon\" \n\ndim(k) &lt;- c(3,2)\nk\n\n     [,1]       [,2]      \n[1,] \"Hashem\"   \"Minha\"   \n[2,] \"John\"     \"Parushya\"\n[3,] \"Cecillia\" \"Keeheon\" \n\ncolnames(k) &lt;- c(\"Section A\", \"Section B\")\n\nk\n\n     Section A  Section B \n[1,] \"Hashem\"   \"Minha\"   \n[2,] \"John\"     \"Parushya\"\n[3,] \"Cecillia\" \"Keeheon\" \n\nrownames(k) &lt;- c(\"Student 1\", \"Student 2\", \"Student 3\")\n\nk\n\n          Section A  Section B \nStudent 1 \"Hashem\"   \"Minha\"   \nStudent 2 \"John\"     \"Parushya\"\nStudent 3 \"Cecillia\" \"Keeheon\" \n\n\nBinding vectors together to make a matrix\n\n# Binding\nx &lt;- 1:3\ny &lt;- 4:6\nz &lt;- c(\"Camilla\",\"Nila\",\"Duflo\",\"Akbar\")\n\nx\n\n[1] 1 2 3\n\ny\n\n[1] 4 5 6\n\nz\n\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\nrbind(x,y) # Stitches vector row wise, or appends it horizontally\n\n  [,1] [,2] [,3]\nx    1    2    3\ny    4    5    6\n\ncbind(x,y) # Stitches vector column wise, or vertically\n\n     x y\n[1,] 1 4\n[2,] 2 5\n[3,] 3 6\n\n\n\n\n\n\nLists\nIf we want to create something that stores objects of different classes together, we use another data structure called list.\nA list can contain two or more classes of objects with different lengths.\n\n\n\n\n\n\nCreating lists\n\nlist_1 &lt;- list(\"a\" = 2.5, \"b\" = TRUE, \"c\" = 1:3)\n\nlist_1\n\n$a\n[1] 2.5\n\n$b\n[1] TRUE\n\n$c\n[1] 1 2 3\n\n\nWe created a list with objects of three different types - numeric, logical, and integer vector.\n\n# Structure of the list\nstr(list_1)\n\nList of 3\n $ a: num 2.5\n $ b: logi TRUE\n $ c: int [1:3] 1 2 3\n\n\nWe can also create a list with existing vectors.\n\n# A new vector\nname_vec &lt;- c(\"Camilla\",\"Nila\",\"Duflo\",\"Akbar\")\n\n# And then lets use the vectors we already have in the environment\nlist_2 &lt;- list(name_vec, c_logical, d_char, f_int, e_int, a_num)\nlist_2\n\n[[1]]\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\n[[2]]\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n\n[[3]]\n[1] \"Sheila\"  \"Nila\"    \"Camilla\"\n\n[[4]]\n[1] 1 2 3 4 5\n\n[[5]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n[[6]]\n[1]  0.0  0.7  9.0  2.0  3.0  4.0 -1.0\n\n\n\n# let's check the classes of objects\nclass(list_2[[2]])\nclass(list_2[[3]])\n\n# And their lengths\nlength(list_2[[2]])\nlength(list_2[[3]])\n\nAccessing elements in a List\nBy indices in a list\n\n# So lists are printed differently, and elements of a list will have [[]] i.e 2 brackets.    \n\nlist_2\n\n[[1]]\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\n[[2]]\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n\n[[3]]\n[1] \"Sheila\"  \"Nila\"    \"Camilla\"\n\n[[4]]\n[1] 1 2 3 4 5\n\n[[5]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n[[6]]\n[1]  0.0  0.7  9.0  2.0  3.0  4.0 -1.0\n\n\n\n## Accessing elements | run each of the follwing lines and see the output\nlist_2[[2]] \nlist_2[2]\nlist_2[1][2]\nlist_2[[1]][1]\nlist_2[[1]][[1]]\nlist_2[[1]][2]\n\nBy using names or tags\n\nlist_3 &lt;- list(name = \"John\", age = 19, speaks = c(\"English\", \"French\"))\n\n# access elements by name\nlist_3$name\nlist_3$age\nlist_3$speaks\n\n# access elements by integer index\nlist_3[c(1, 2)]\nlist_3[-2]\n\n# access elements by logical index\nlist_3[c(TRUE, FALSE, FALSE)]\n\n# access elements by character index\nlist_3[c(\"age\", \"speaks\")]\n\nModifying lists\nAdding components in a list\n\nlist_4 &lt;- list(name = \"Clair\", age = 19, speaks = c(\"English\", \"French\"))\n\n# assign a new element to the list using double brackets [[]]\nlist_4[[\"married\"]] &lt;- FALSE\n\n# print the updated list\nlist_4\n\n$name\n[1] \"Clair\"\n\n$age\n[1] 19\n\n$speaks\n[1] \"English\" \"French\" \n\n$married\n[1] FALSE\n\n\nDeleting components in a list\n\nlist_5 &lt;- list(name = \"Clair\", age = 19, speaks = c(\"English\", \"French\"))\n\n# remove an element from the list using double brackets [[]]\nlist_5[[\"age\"]] &lt;- NULL\n\n# print the structure of the updated list\nstr(list_5)\n\nList of 2\n $ name  : chr \"Clair\"\n $ speaks: chr [1:2] \"English\" \"French\"\n\n# remove an element from the list using $ notation\nlist_5$married &lt;- NULL\n\n# print the structure of the updated list\nstr(list_5)\n\nList of 2\n $ name  : chr \"Clair\"\n $ speaks: chr [1:2] \"English\" \"French\"",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#file-management-and-workflow",
    "href": "rep-research.html#file-management-and-workflow",
    "title": "Reproducible Research",
    "section": "File Management and Workflow",
    "text": "File Management and Workflow\n\nUsing R Projects\nhere package\nFolder Structure\nTakeaways",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#r-projects",
    "href": "rep-research.html#r-projects",
    "title": "Reproducible Research",
    "section": "R Projects",
    "text": "R Projects\nWe used the setwd() command till now to trace the files we need in our work. As your work expands, projects will have multiple datasets to be loaded, different subsidiary scripts to be used, and multiple outputs to be saved.\nA first order problem related to both file management and reproducability of code is the usage of file paths. Using absolute paths, like ~/User/MyName/Documents/..... becomes cumbersome and also inhibits efficiency of reproducability. Every time someone else runs the script, they will have to change the file paths in all the instances in Rscripts or .qmd file to locate the related datasets as well as other objects. Similarly, there would be issues with saving objects in new places. A partially efficient way we used till now involved using setwd() to direct R to a new working directory; this is also called usage of relative paths\nR Projects is a built-in mechanism in RStudio for seamless file management and usage of relative paths.\nLet’s start by creating a new project. Click File &gt; New Project. Name the new project govt-8001-dataessay.\n\n\n\n\n\n\n\n\nFigure 1: To create new project: (top) first click New Directory, then (middle) click New Project, then (bottom) fill in the directory (project) name, choose a good subdirectory for its home and click Create Project. source\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\nDo this process again, this time creating a new project in the the existing directory. The existing directory should be the folder where you have been saving R scripts and .qmd file associated with math camp 2024.\nGo to the folder on your system, and click the .RProj file.\nStart a new qmd file like we did yesterday. Delete existing code except for YAML. Run getwd() command in console and see the difference.\nStart a new R code chunk (cmd + option + I) and load vdem dataset. Notice the change in behavior when you press TAB inside the readRDS() function.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#here-package",
    "href": "rep-research.html#here-package",
    "title": "Reproducible Research",
    "section": "here package",
    "text": "here package\nAn efficient file and folder management system is going to be crucial as we move into working with serious projects. As stressed earlier, keeping and using all the files associated with a project in a comprehensible folder system is facilitated by R Projects. You would ideally want to create your own template for folder management that you follow across proejcts. For starters, the folder structure below is the one created for your data essay assignment in Govt 8001 or Quant 1.\nYou can use the point-and-click fucntionality in your computers to create this strcuture. Later today, we will briefly go through an R script that do this programmatically.\n📦 govt-8001-dataessay\n├─ govt-8001-dataessay.RProj\n├─ 000-setup.R\n├─ 001-eda.qmd\n├─ 002-analysis.qmd\n└─ 003-manuscript.qmd\n├─ Data\n│  ├─ Raw\n│  │  ├─ Dataset1\n│  │  │  ├─ dataset1.csv\n│  │  │  └─ codebook-dataset1.pdf\n│  │  └─ Dataset2\n│  │     ├─ ...dta\n│  │     └─ codebook-dataset2.pdf\n│  └─ Clean\n│     └─ Merged-df1-df2.csv\n├─ Scripts\n│  ├─ R-scripts\n│  │  ├─ plotting-some-variable.R\n│  │  └─ exploring-different-models.R\n│  ├─ Stata-Scripts\n│  │  └─ seeing-variable-labels.do\n│  └─ Python-Scripts\n│     └─ scraping-data-from-website.py\n└─ Outputs\n   ├─ Plots\n   │  ├─ ...jpeg\n   │  └─ ...png\n   ├─ Tables\n   │  └─ .csv\n   └─ Text\n      └─ ...txt\nSuggested folder structure for a Quant-1 project\nWhile we learnt how to create or associate an .RProj with a folder, integrating it with here() function from the here package, makes things further smoother. Let’s do it with the following exercise.\n\n\n\n\n\n\nExercise\n\nGo the RStudio window with mathcamp2024 project. Check the extreme upper left corner to see if you are in the write window.\nIn the qmd file we were working in, add an R chunk.\nLoad the library here with the follwing code. Run the code line by line\n\n\nlibrary(here)\n\n\n # See the output for each of the following lines\nhere()\n\nhere(\"Datasets-mathcamp\",\"V-Dem-CY-Full+Others-v12.rds\")\n\n# syntax is\n\n# here(\"First subfolder from the root folder\", \"second subfolder\",...., \"file\")\n\n\nvdem_new &lt;- readRDS(here(\"Datasets-mathcamp\",\"V-Dem-CY-Full+Others-v12.rds\"))\n\nThis is a cleaner syntax which when coupled with usage of R projects saves time in typing file paths and avoids issues when the project is run on some other computer system.\nNote: here() always notes the path from the main folder or the root directory where your .RProj file is located.\nSave the files and close the mathcamp2024 project window\n\n\n\nMake it a habit of using R Prohects and here() function in your scripts for writing portable code.\nYou can read this quick and informative blogpost on using these two here.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#folder-structure",
    "href": "rep-research.html#folder-structure",
    "title": "Reproducible Research",
    "section": "Folder Structure",
    "text": "Folder Structure\nLet’s look at the other opened RStudio window. This is the one associated with govt-8001-dataessay.\nWe ideally want a folder structure that is easily understandable to us and others.\n📦 govt-8001-dataessay\n├─ govt-8001-dataessay.RProj\n├─ 000-setup.R\n├─ 001-eda.qmd\n├─ 002-analysis.qmd\n└─ 003-manuscript.qmd\n├─ Data\n│  ├─ Raw\n│  │  ├─ Dataset1\n│  │  │  ├─ dataset1.csv\n│  │  │  └─ codebook-dataset1.pdf\n│  │  └─ Dataset2\n│  │     ├─ ...dta\n│  │     └─ codebook-dataset2.pdf\n│  └─ Clean\n│     └─ Merged-df1-df2.csv\n├─ Scripts\n│  ├─ R-scripts\n│  │  ├─ plotting-some-variable.R\n│  │  └─ exploring-different-models.R\n│  ├─ Stata-Scripts\n│  │  └─ seeing-variable-labels.do\n│  └─ Python-Scripts\n│     └─ scraping-data-from-website.py\n└─ Outputs\n   ├─ Plots\n   │  ├─ ...jpeg\n   │  └─ ...png\n   ├─ Tables\n   │  └─ .csv\n   └─ Text\n      └─ ...txt\nWe can create this structure by using point and click system on our laptops. But since we might want to use the same folder structure repetitively it will make sense to be lazy and do it programmatically.\n\n\n\n\n\n\nExercise\n\nDownload the 000-setup.R from here\nPlace it in the govt-8001-dataessay folder.\nOpen it in the opened RStudio window.\n\n```{r}\n# Name: 000-setup.R\n# Author: Parushya\n# Purpose: Creates main folders, subfolders in the main project directory\n# Will also ensure that you have basic packages required to run the repository\n# Date Created: 2020/10/07\n\n\n\n# Checking if packages are installed and installing\n\n\n# check.packages function: install and load multiple R packages.\n# Found this function here: https://gist.github.com/smithdanielle/9913897 on 2019/06/17\n# Check to see if packages are installed. Install them if they are not, then load them into the R session.\n\ncheck.packages &lt;- function(pkg) {\n  new.pkg &lt;- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) {\n    install.packages(new.pkg, dependencies = TRUE)\n  }\n  sapply(pkg, require, character.only = TRUE)\n}\n\n# Check if packages are installed and loaded:\npackages &lt;- c(\"janitor\",  \"tidyverse\", \"utils\", \"here\")\ncheck.packages(packages)\n\n\n# Setting Directories and creating subfolders\n\n\n# Creating Sub Folders\n\n## Data\ndir.create(file.path(paste0(here(\"Data\")))) # Data Folder\ndir.create(file.path(paste0(here(\"Data\",\"Raw\")))) # Raw Data sub-folder\ndir.create(file.path(paste0(here(\"Data\",\"Clean\")))) # Clean Data sub-folder\n\n\n# Scripts\ndir.create(file.path(paste0(here(\"Scripts\")))) # Scripts Folder\ndir.create(file.path(paste0(here(\"Scripts\",\"RScripts\")))) # RScripts  sub-folder\ndir.create(file.path(paste0(here(\"Scripts\",\"Stata-Scripts\")))) # Stata Scripts sub-folder\ndir.create(file.path(paste0(here(\"Scripts\",\"Python-Scripts\")))) # Python Scripts sub-folder\n\n\n# Output\ndir.create(file.path(paste0(here(\"Outputs\")))) # Outputs Folder\ndir.create(file.path(paste0(here(\"Outputs\",\"figures\")))) # Figures sub-folder\ndir.create(file.path(paste0(here(\"Outputs\",\"tables\")))) # Tables sub-folder\ndir.create(file.path(paste0(here(\"Outputs\",\"text\")))) # Text sub-folder\n\n```\n\nRun the file line-by-line. See the folder structure created in your main folder.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#takeaways",
    "href": "rep-research.html#takeaways",
    "title": "Reproducible Research",
    "section": "Takeaways",
    "text": "Takeaways\nHere’s a quick workflow for starting a new project or assignment or paper.\n\nMake a new folder in your computer with apt name. Ideally, govt-&lt;coursecode&gt;-&lt;project&gt;.\nStart RStudio.\nCreate a new Rstudio Project by clicking File &gt; New Project. Name it govt-&lt;coursecode&gt;-&lt;project.\nCheck if now your RStudio Window shows the project name on top right corner. If not, go to folder and double-click the .RProj file.\nPaste the 000-setup.R file in the main project folder. Open it in the same Rstudio window with the project and run the complete file. Your folder structure is created.\nCopy your raw data in Data/Raw folder. Similarly, your scripts in Scripts/RScripts folder\nStart your new .qmd file and save it in the main folder.\nRemember to use here() package extensively in both scripts and quarto file when loading or saving the data.\nYou can always zip the whole project folder for sharing. The receiver will just need to unzip and run the code after starting the associated .RProj file, without changing file paths on their computer.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#footnotes",
    "href": "rep-research.html#footnotes",
    "title": "Reproducible Research",
    "section": "",
    "text": "Inspired by the summary provided by Prof Aaron Williams’ course on Data Analysis offered at McCourt School. Strongly recommended to learn good coding using R↩︎",
    "crumbs": [
      "Reproducible Research"
    ]
  }
]