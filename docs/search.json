[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Capstone in Political Economy",
    "section": "",
    "text": "Introduction\nThis web book is meant to be a one-stop resource for all data and analysis related tasks in the Capstone in Political Economy course.\nThe pages will correspond to Data and Analysis sections in the course.\nThe notes here will use R as a programming language and RStudio as platform (or technically known as IDE - Integrated Development Platform) of choice. However, all the concepts will also be valid for Stata users. I will include any important/relevant deviations between the two programming statistical software approaches here.\nYou shoudl start by having the following installed on your computers:\n\nR - Statistical Programming Language\nRStudio - Interactive Development Environment for R\nStata - Statistical Software Package (the “other” one)\nZotero - Reference Management Tool\nGitHub - Storing code online with version control\n\n\nR and R Studio\nUse the link here to install RStudio on your systems.\n\n\nStata\nStata is a paid software. Georgetown provides download option through the university webstore here.\n\n\nZotero\nZotero is a reference management tool. It allows you to maintain a structured bibliography. Its integration with various web browsers and software like MS Word and R, makes it a fantastic tool for keeping track of readings as well as citing them.\n\n\n\n\n\nZotero Folder\n\n\n\n\n\nMake Zotero Account.\nAdd a connector to the browser (For eg, zotero connector for google chrome).\nDownload Zotero Desktop App here.\nConnect Zotero to R Studio. (We will do this step on Day 5, using the link here).\n\n\n\nGitHub\nMake your account here",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Course Details",
    "section": "",
    "text": "Capstone in Political Economy\nIPEC/PECO—4980, Spring 2025\nTuesday/Thursday: 11:00–12:15\nWalsh 495",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#professors",
    "href": "intro.html#professors",
    "title": "Course Details",
    "section": "Professors",
    "text": "Professors\nProf. Nita Rudra\n- Office: Mortara Center 206\n- Office Hours: Tuesdays, 12:30–1:30 pm\n- Email: nr404@georgetown.edu\nProf. Joel Simmons\n- Office: Mortara Center #212\n- Office Hours: TBA\n- Email: js4618@georgetown.edu\nTA: Parushya\n- Office Hours: Thursdays, 1:00–3:00 PM\n- Location: TBA/Zoom - Email: pp714@georgetown.edu",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#office-hour-links",
    "href": "intro.html#office-hour-links",
    "title": "Course Details",
    "section": "Office Hour Links",
    "text": "Office Hour Links\n\nSign up for Professor Rudra’s office hours (Zoom or in-person)\n\nSign up for Professor Simmons’ office hours",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#goals",
    "href": "intro.html#goals",
    "title": "Course Details",
    "section": "Goals",
    "text": "Goals\nStudents will write a senior research thesis in political economy. You will find and evaluate scholarly literature and make an original contribution to that literature. The focus will be on developing a research question and a methodology to address it. The course serves as the culmination of the knowledge you obtained as majors in International Political Economy (SFS students) or Political Economy (College students).",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#requirements",
    "href": "intro.html#requirements",
    "title": "Course Details",
    "section": "Requirements",
    "text": "Requirements\nThe only course requirement is that students attend and participate in all lecture, discussion, presentation, and writing sessions.\nStudents may find the following book helpful as they proceed, and so it is recommended but not required:\n\nPowner, L. (2015). Empirical research and writing. A Political Science Student’s Practical Guide. SAGE Publications, Inc.\nhttps://doi.org/10.4135/9781483395906",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#assignments",
    "href": "intro.html#assignments",
    "title": "Course Details",
    "section": "Assignments",
    "text": "Assignments\n\nResearch Paper (90%)\nEach student will write an article-length paper based on the student’s own original research. The length should be of a standard article in the political economy field—about 20 pages, double-spaced, 12-point font, including tables, figures, references, and notes. In the paper, students are expected to evaluate, critique, test, and build upon a current debate in political economy. Students should develop hypotheses and test them using quantitative methods. All final thesis papers must be posted on the Canvas discussion site and submitted in hard copy (if possible) by the due date listed in the outline. Late papers will be downgraded ½ a letter grade per day late.\n\n\nResearch Presentations (10%)\nToward the end of the term, each student will present their paper to the class. Student presentations should be no more than 8–10 minutes in length and will be followed by 8–10 minutes of questions and answers. Use of PowerPoint slides or other presentation materials is required. An electronic version of your presentation must be posted on the Canvas discussion site by 10:00 am on the day it is to be presented.",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "intro.html#class-structure",
    "href": "intro.html#class-structure",
    "title": "Course Details",
    "section": "Class Structure",
    "text": "Class Structure\nThe course has three forms of instruction:\n\nLecture/Discussions: Sessions indicated as ‘Discussions’ will be a cross between a lecture and group Q&A. These sessions will focus on the major components of the final thesis: Topic/Puzzle, literature review, methodology, and analysis.\n\nData Sessions: The TA will provide sessions aimed at providing you a brief refresher on working with statistical software such as R or Stata.\n\nWriting Days: Much of the semester will be dedicated toward group meetings and writing days. Students will come to class and work on their papers. The professors and TA will be available for questions.\n\nStudents will be divided into two cohorts: one led by Professor Nita Rudra and the other by Professor Joel Simmons. Each cohort will further be subdivided into Group A and Group B. Please ensure you are aware of your assigned cohort and group, as this will determine your participation and schedule throughout the course.\n\n\n\nTentative Schedule\n\n\nOn days scheduled as “Writing Day with Professors”, the particular groups (A or B) from Prof Rudra & Simmons sections will meet them separately. The other groups from both sections will meet the TA (Writing Day with TA).\nAs the course progresses, writing days could also be used as days for one-on-one meetings with Professors and TA for focused discussion on your research projects.\nThe due dates for deliverables (column 3 above) are for both groups in both the sections. All the deliverables are due on Canvas before the beginning of class on that particular date.\nDetails of these deliverables is as follows:\nShort research proposal: Your research proposal should include (i) the research question and why it is interesting, (ii) your working hypothesis and its basis, (iii) potential methodological approach, data and challenges.  It is due on Canvas by the beginning of class. \nLiterature Review: Your literature review should summarize key scholarly works relevant to your research question, identify gaps or unresolved questions in the existing literature, and explain how your research will address these gaps.\nAnalysis: Submit a write-up of the analysis section (including the description of the research methods, presentation of results, and discussion of their robustness).\nPresentation: Standard conference poster presentation. More details about this deliverable to be explained in class.\nAnnotated replication material: Your annotated replication material should include all data, program files, and a detailed readme file necessary to replicate your results. The readme file should clearly explain the steps to reproduce your analysis and any specific instructions for using the data or code.\nFinal Paper: Your final paper should be an article-length manuscript (approximately 20 double-spaced pages) that evaluates, critiques, tests, and builds upon a current debate in political economy. It should include a clear research question, hypotheses, methodology, analysis, results, and a discussion of findings.",
    "crumbs": [
      "Course Details"
    ]
  },
  {
    "objectID": "rep-research.html",
    "href": "rep-research.html",
    "title": "Reproducible Research",
    "section": "",
    "text": "Why Programming or Coding?\nThere are a lot of fancy answers to it. But the key idea is that you want to be lazy about repetitive tasks (MBAs call it being “productive”).\nMany tasks - data cleaning, wrangling, visualization, and statistical analysis - require you to do them many times. Moreover, you would want to be able to reproduce and replicate your thinking about all of the tasks mentioned above on many different datasets and sometimes even on the same dataset after some time.\nCoding is about formalizing your thinking about how you treat the data and automating the formalization task to be done repetitively. It improves efficiency, enhances reproducibility, and boosts creativity when it comes to finding new patterns in your data.\nBenchmarks for reproducible data and statistical analyses:1",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#why-programming-or-coding",
    "href": "rep-research.html#why-programming-or-coding",
    "title": "Reproducible Research",
    "section": "",
    "text": "Accuracy: Write a code that reduces the chances of making an error and lets you catch one if it occurs.\nEfficiency: If you are doing it twice, see the pattern of your decision-making and formalize it in your code. Difference between Excel and coding\nReplicate-and-Reproduce: Ability to repeat the computational process which reflects your thinking and decisions that you took along the way. Improves transparency and forces one to be deliberate and responsible about choices during analyses.\n\nHuman Interpretability: Writing code is not just about analyzing but allowing yourself and then others to be able to understand your analytic choices.\n\nPublic Good: Research is a public good. And the code allows your research to be truly accessible. This means you write a code that anyone else who understands the language can read, reuse, and recreate without you being present. We essentially ensure that by writing a readable and ideally publicly accessible code.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#guidelines",
    "href": "rep-research.html#guidelines",
    "title": "Reproducible Research",
    "section": "Guidelines",
    "text": "Guidelines\nThe article “Ten Simple Rules for Reproducible Computational Research” by Sandve et al. (2013) provides guidelines to ensure that computational research is reproducible, transparent, and robust. Here’s a summary of the key points:\n\n\n\n\n\n\n\n\nRule\nDescription\nNotes\n\n\n\n\nDocumentation\nTrack how results are produced, including all steps in the analysis workflow.\nKeep short notes on reults\n\n\nAutomation\nMinimize manual data manipulation by using scripts and documenting any manual changes.\nMake changes to raw data in your scripts\n\n\nVersion Control\nUse version control systems for all custom scripts to track changes and maintain reproducibility.\nUsing Github\n\n\nComprehensive Records\nArchive all versions of external programs used, all intermediate results, and exact observation conditions.\nKeep notes about data in comments\n\n\nAccessibility\nMake raw data, scripts, and results publicly accessible to enhance transparency and replication.\nMaintainig good workflow",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#annotatating-code",
    "href": "rep-research.html#annotatating-code",
    "title": "Reproducible Research",
    "section": "Annotatating Code",
    "text": "Annotatating Code\nA comment should explain the purpose of a command or code and not just be a description of what it does.\nIn R, comments are designated by a # (pound) sign\n\nR - Bad CommentingR - Good Commenting\n\n\n```{r}\nx &lt;- rnorm(100)  # generating data\ny &lt;- x + rnorm(100, mean=50, sd=0.1)  # creating y\nplot(x, y)  # plotting x against y\nm &lt;- lm(y ~ x)  # linear model\nsummary(m)  # summary of model\n```\n\n\n```{r}\n# Generate a sample of 100 random numbers from a standard normal distribution\nx &lt;- rnorm(100)\n\n# Create a dependent variable 'y' with a strong linear relationship plus small random noise\ny &lt;- x + rnorm(100, mean=50, sd=0.1)\n\n# Plot 'x' against 'y' to visualize the relationship\nplot(x, y, main=\"Scatterplot of Y against X\", xlab=\"X variable\", ylab=\"Y variable\")\n\n# Fit a linear regression model to predict 'y' based on 'x'\nmodel &lt;- lm(y ~ x)\n\n# Display a detailed summary of the regression model\nsummary(model)\n\n```\n\n\n\n\nIn STATA Comments may be added to programs in three ways:\n* begin the line with ;\n begin the comment with //;\n* place the comment between /* and */ delimiters.\n\nStata - Bad CommentingStata - Good Commenting\n\n\n```{stata}\nsysuse auto\ngen z = price + weight\nregress z mpg\n\n```\n\n\n```{stata}\n// Load the built-in 'auto' dataset from Stata's system files\nsysuse auto, clear\n\n// Generate a new variable 'z' representing the sum of 'price' and 'weight'\ngen z = price + weight\n\n// Perform a linear regression of 'z' on 'mpg' to understand the relationship between mileage and the new variable\nregress z mpg\n\n```",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#file-management-and-workflow",
    "href": "rep-research.html#file-management-and-workflow",
    "title": "Reproducible Research",
    "section": "File Management and Workflow",
    "text": "File Management and Workflow\n\nUnderstanding Absolute and Relative Paths\nWhen working with files in any programming environment, paths specify the location of files and folders. These paths can be absolute or relative, and the choice between them significantly impacts reproducibility, portability, and ease of collaboration\nAbsolute Paths An absolute path provides the complete address of a file or folder, starting from the root directory of the file system. It tells the software exactly where to find a file, regardless of where the script is run.\nExample: C:/Users/YourName/Documents/Project/Data/raw_data.dta\nRelative Paths A relative path specifies the location of a file or folder relative to a “base directory” (e.g., the project’s working directory). It does not start from the root directory but instead is calculated based on the location of the script.\nSuppose your working directory is set to: C:/Users/YourName/Documents/Project\nThen, a relative path might look like: Data/raw_data.dta\n\n\n\n\n\n\nPractical Analogy Think of absolute and relative paths like giving directions to a house:\nAbsolute Path: “Go to the main city square, then take the highway north, turn right at the first traffic light, and find the house at 123 Main Street.” Works for people starting anywhere, but requires detailed instructions specific to the city. Relative Path: “From the library, walk two blocks north, then turn left. The house is the second one on the right.” Simpler and context-aware, but assumes everyone starts from the library.\n\n\n\nKey Differences Between Absolute and Relative Paths\n\n\n\n\n\n\n\n\nFeature\nAbsolute Path\nRelative Path\n\n\n\n\nStarting Point\nStarts from the root directory of the file system.\nStarts from the current working directory.\n\n\nPortability\nNot portable—specific to the user’s system.\nHighly portable—adapts to different systems.\n\n\nEase of Sharing\nHarder to share; others must update paths.\nEasier to share; no changes needed if structure is consistent.\n\n\nUse Case\nBest for fixed environments or one-off scripts.\nIdeal for collaborative and reproducible projects.\n\n\nFlexibility\nBreaks if the file is moved or the system changes.\nAdapts as long as the folder structure remains consistent.\n\n\n\n\n\nStandardized Folder and File Structure\nAn efficient file and folder management system is going to be crucial as we move into working with serious projects. Storing using all the files associated with a project in a comprehensible folder system is facilitated in both R and Stata. You would ideally want to create your own template for folder management that you follow across proejcts. For starters, the folder structure below is the one created for your research project in this course.\nYou can use the point-and-click functionality in your computers to create this structure. Or you can do it prgrammatically given the scripts in sub-chapters for stata and R.\n📦 cpe-4980-dataessay\n├─ cpe-4980-dataessay.RProj\n├─ 000-setup.R\n├─ 001-eda.qmd\n├─ 002-analysis.qmd\n└─ 003-manuscript.qmd\n├─ Data\n│  ├─ Raw\n│  │  ├─ Dataset1\n│  │  │  ├─ dataset1.csv\n│  │  │  └─ codebook-dataset1.pdf\n│  │  └─ Dataset2\n│  │     ├─ ...dta\n│  │     └─ codebook-dataset2.pdf\n│  └─ Clean\n│     └─ Merged-df1-df2.csv\n├─ Scripts\n│  ├─ R-scripts\n│  │  ├─ plotting-some-variable.R\n│  │  └─ exploring-different-models.R\n│  ├─ Stata-Scripts\n│  │  └─ seeing-variable-labels.do\n│  └─ Python-Scripts\n│     └─ scraping-data-from-website.py\n└─ Outputs\n   ├─ Plots\n   │  ├─ ...jpeg\n   │  └─ ...png\n   ├─ Tables\n   │  └─ .csv\n   └─ Text\n      └─ ...txt\n\n\n\n\n\n\nKey Takeaways for Reproduciblility\n\n\n\n\nAny modifications to the raw dataset, like manipulating a variable’s scale, generation of new variables, or removal of values, should be done in the scripts as far as possible. When done externally, make a note with comments in the code.\nWrite well commented code. Explaining the functions performed by the commands in the context of your data analysis.\nUse relative paths.\nUse a standardized folder system.\n\n\n\n\n\n\n\n\nSandve, Geir Kjetil, Anton Nekrutenko, James Taylor, and Eivind Hovig. 2013. “Ten Simple Rules for Reproducible Computational Research.” PLOS Computational Biology 9 (10): e1003285. https://doi.org/10.1371/journal.pcbi.1003285.",
    "crumbs": [
      "Reproducible Research"
    ]
  },
  {
    "objectID": "rep-research.html#footnotes",
    "href": "rep-research.html#footnotes",
    "title": "Reproducible Research",
    "section": "",
    "text": "Inspired by the summary provided by Prof Aaron Williams’ course on Data Analysis offered at McCourt School. Strongly recommended to learn good coding using R↩︎",
    "crumbs": [
      "Reproducible Research"
    ]
  }
]